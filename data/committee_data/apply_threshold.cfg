# This is super hardcore :)
# What this does is apply the thresholds for getting any seats to election
# results. The election results (in the "just votes" format) should be in
# $votes_by_district. The threshold file should be in threshold_data,
# as required by threshold.cfg

# Sample usage:
# python3 ../python_lib/cadmium.py dump.cfg
#   i committee_data/apply_threshold.cfg
#   threshold_data 2015.csv
#   votes_by_district ../sejm_election_results/just_votes.cfg
#   pure_election_results by_district.cfg
#   c 2015_by_community.cfg

# The threshold data is going to be one row, with party names suffixed with
# _thr as the column name.

INPUT TABLES thresholds, votes;
PIVOT thresholds WITH NEW_HEADERS_FROM Party;
TRANSFORM thresholds WITH curr() FOR 1: AS currname() + "_thr";

# Now, we start aggregating. In totals, we'll have the total countrywide
# votes for a single party, again as a single row, with the column name
# begin the party suffixed by _total.
AGGREGATE votes TO totals WITH sum(curr()) FOR 2: AS currname() + "_total";
# Now we pivot and aggregate again, to get the total number of votes, for
# all parties, countrywide.
PIVOT totals TO totalsum;
AGGREGATE totalsum WITH sum(at(1)) AS total;

# We now have the actual data (votes), and the three one-row tables. We
# join all of them together.
JOIN totalsum INTO votes ON 1 EQ 1 AS vtable2;
JOIN totals INTO vtable2 ON 1 EQ 1 AS vtable3;
JOIN thresholds INTO vtable3 ON 1 EQ 1 AS vtable4;

# This is the horrifying part. The original data is somewhere at the end,
# in the range [index("district") + 1 : ]. The other stuff can be accessed
# by reference variables, using the suffixes we used.
TRANSFORM vtable4 TO table WITH
  district AS district,
  if(at(currname() + "_total") * 100 < at(currname() + "_thr") * total,
     0, curr())
  FOR [index("district") + 1:]
;
OUTPUT TABLES table;
