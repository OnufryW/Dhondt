# Chcę policzyć GHI i LHI dla metod P0, P1, P2, P3, P4, P5, P6, P, dla lat
# 2015, 2019, 2023.

# vote data mam dla wszystkich trzech lat, i jest takie same. Trzeba
# dostarczyć seat_data. Będą oddzielne tabelki dla każdego parametru, z
# kolumnami a (2015), b (2019) i c (2023)

RUN FILE "../sejm_election_results/2011_by_community.cfg" INTO raw11;
RUN FILE "../sejm_election_results/2015_by_community.cfg" INTO raw15;
RUN FILE "../sejm_election_results/2019_by_community.cfg" INTO raw19;
RUN FILE "../sejm_election_results/2023_by_community.cfg" INTO raw23;

LOAD onasz FROM 'onasz.csv';
TRANSFORM onasz WITH oid AS oid, okw AS okw, int(curr()) FOR 3:;

# Dla P0 (takie samo dla wszystkich lat)

RUN FILE "../district_definitions/2019.cfg" INTO zero;
TRANSFORM zero WITH id AS id, seats AS a, seats AS b, seats AS c;

# Walidacja danych Onasza dla P0.
JOIN zero INTO onasz ON id EQ oid AS jtable;
TRANSFORM jtable WITH assert(pzero = a) AS a, 
    assert(pzero = b) AS b, assert(pzero = c) AS c;
DROP jtable;

# Dla P1, P2, P3 mamy dane Onasza, nie replikujemy ich.
TRANSFORM onasz TO jeden WITH oid AS id, pjedenjp AS a, pjedenjd AS b, pjedendt AS c;
TRANSFORM onasz TO dwa WITH oid AS id, pdwajp AS a, pdwajd AS b, ptrzydt AS c;
TRANSFORM onasz TO trzy WITH oid AS id, ptrzyjp AS a, ptrzyjd AS b, ptrzydt AS c;

# Dla P4 i P5 liczymy z danych z komisji. 
# Tabelka z pczterypiec ma id, pcztery, ppiec"
RUN FILE "pczterypiec.cfg" FROM raw15 INTO apc;
TRANSFORM apc WITH id AS aid, pcztery AS apcztery, ppiec AS appiec;

RUN FILE "pczterypiec.cfg" FROM raw19 INTO bpc;
TRANSFORM bpc WITH id AS bid, pcztery AS bpcztery, ppiec AS bppiec;

RUN FILE "pczterypiec.cfg" FROM raw23 INTO cpc;
TRANSFORM cpc WITH id AS cid, pcztery AS cpcztery, ppiec AS cppiec;

JOIN apc INTO bpc ON aid EQ bid WITH RAISE UNMATCHED KEYS AS abpc;
JOIN cpc INTO abpc ON cid EQ aid WITH RAISE UNMATCHED KEYS AS jpc;

TRANSFORM jpc TO cztery WITH aid AS id, apcztery AS a, bpcztery AS b, cpcztery AS c;
TRANSFORM jpc TO piec WITH aid AS id, appiec AS a, bppiec AS b, cppiec AS c;

# Tu p. Onasz znowu w 2019 z nieznanych powodów zawyża wynik dla Elbląga, 
# tym razem kosztem Siedlec. Weryfikacja, wg arkusza "wyniki głosowania
# na listy po okręgach sejm.csv", źródło: 
# https://sejmsenat2019.pkw.gov.pl/sejmsenat2019/pl/dane_w_arkuszach
# "wyniki głosowania na listy Sejmowe, po okręgach, pobrano 22 lipca 2025.
# Suma wartości w czwartej kolumnie to 30253556 (łączna liczba uprawnionych
# w momencie zakończenia wyborów). Suma wartości w kolumnie ósmej (czyli
# łączna lista dopisanych w dniu wyborów) to 202810, czyli różnica to
# 30050746. Dla okręgu 34 czwarta kolumna to 484489, ósma to 1772,
# czyli różnica to 482717. Zatem "idealna" liczba mandatów to
# 482717 * 460 / 30050746, czyli około 7.389.
# Dla okręgu 18 czwarta kolumna to 752277, ósma to 2582, czyli różnica to
# 749695. Zatem idealna liczba mandatów to 749695 * 460 / 30050746, czyli
# około 11.476. Zatem okręgowi 18 kolejny mandat należy się "bardziej" niż
# okręgowi 34, a zatem fakt, że w Tabeli 2 w pracy p. Onasza w kolumnie
# 2019, P4 mamy dla okręgu 18-tego 11 mandatów, a dla okręgu 34-go 8 musi
# być błędem.
# Powyższa rozbieżność (jeden mandat przesunięty z okręgu 18 do 34 w 2019)
# to jedyna rozbieżność między moimi wyliczeniami a wyliczeniami p. Onasza
# dla P4.
# JOIN cztery INTO onasz ON id EQ oid AS jtable;
# TRANSFORM jtable TO verifycztery 
#   WITH id AS district, a AS a, pczteryjp - a AS adiff, 
#   b AS b, pczteryjd - b AS bdiff;
#   WITH assert(pczteryjp = a) AS a, assert(pczteryjd = b) AS b;
# FILTER verifycztery BY or(not(adiff = 0), not(bdiff = 0));
# DUMP verifycztery;
# DROP jtable;

# Podobnie wydaje się, że są jakieś błędy rachunkowe w obliczeniach
# dla P5. Tu wg moich obliczeń p. Onasz daje o jeden mandat za dużo w
# okręgach 34 i 17, a o jeden za mało w okręgach 13 i 19. Znowu sprawdzenie
# - liczby wyborców w momencie zamknięcia głosowania w okręgach 13, 17, 19
# i 34 to odpowiednio 953716, 556858, 1742400 i 484489, "idealne" liczby
# mandatów to odpowiednio 14.501, 8.4669, 26.493 i 7.367, a zatem dodatkowy
# mandat powinny dostać raczej okręgi 13 i 19 niż 17 i 34.
# JOIN piec INTO onasz ON id EQ oid AS jtable;
# TRANSFORM jtable TO verifypiec
#   WITH id AS district, a AS a, ppiecjp - a AS adiff,
#        b AS b, pczteryjd - b AS bdiff;
#   WITH assert(ppiecjp = a) AS a, assert(ppiecjd = b) AS b;
# FILTER verifypiec BY or(not(adiff = 0), not(bdiff = 0));
# DUMP verifypiec;
# DROP jtable;

# P6 mozemy sobie wyliczyc sami. Wyliczamy też dla 2011, jako "z", do P7.
RUN raw11 > FILE "pszesc.cfg" INTO zszesc;
TRANSFORM zszesc WITH id AS zid, seats AS z;
RUN raw15 > FILE "pszesc.cfg" INTO aszesc;
TRANSFORM aszesc WITH id AS aid, seats AS a;
RUN raw19 > FILE "pszesc.cfg" INTO bszesc;
TRANSFORM bszesc WITH id AS bid, seats AS b;
RUN raw23 > FILE "pszesc.cfg" INTO cszesc;
TRANSFORM cszesc WITH id AS cid, seats AS c;

JOIN aszesc INTO bszesc ON aid EQ bid WITH RAISE UNMATCHED KEYS AS abszesc;
JOIN abszesc INTO cszesc ON aid EQ cid WITH RAISE UNMATCHED KEYS AS szesc;
TRANSFORM szesc WITH aid AS id, a AS a, b AS b, c AS c;

# Walidacja danych P6 z Onaszem, dla 2015 i 2019.
# Moim zdaniem p. Onasz pomylił się gdzieś licząc dla 2019. Różnice między moimi
# a jego wyliczeniami to:
# - ja daję 12 mandatów w okręgu 4, 12 w okręgu 11, 8 w okręgu 29 i 6 w okręgu 34;
# - on daje 11 w okręgu 4, 11 w okręgu 11, 9 w okręgu 29 i 7 w okręgu 34.
# O ile pomyłka dla okręgu 29 jest zrozumiała (reszta dla 29 to .479, podczas gdy
# dla 4 to .486, a dla 11 to .480), to dlaczego dodatkowy mandat dostał Elbląg
# (z resztą .289) jest dla mnie zagadką.
# Jako, że dla 2015 mamy pełną zgodność; a także moje i p. Onasza wyliczenia wartości
# procentowych się zgadzają, to zakładam, że błąd jest w tamtej pracy, a nie u mnie.
# Mógłbym jeszcze ręcznie sprawdzić, czy faktycznie takie wychodzą te 'idealne mandaty'
# dla Elbląga...

# JOIN szesc INTO onasz ON id EQ oid AS jtable;
# TRANSFORM jtable TO szescdiff
#   WITH id AS id, pszescjp - a AS adiff, a AS minea, pszescjp AS onasza, pszescjd - b AS bdiff, b AS mineb, pszescjd AS onaszb;
# FILTER szescdiff BY or(not(adiff = 0), not(bdiff = 0));
# DUMP szescdiff;
#TRANSFORM jtable TO verifyszesc
#  WITH assert(pszescjp = a) AS a, assert(pszescjd = b) AS b;
# DROP jtable;

# Dane dla P7, czyli naszej propozycji. To są rozkłady dla P6, tylko cofnięte
# o jedne wybory.
JOIN zszesc INTO aszesc ON zid EQ aid WITH RAISE UNMATCHED KEYS AS absiedem;
JOIN absiedem INTO bszesc ON zid EQ bid WITH RAISE UNMATCHED KEYS AS siedem;
TRANSFORM siedem WITH zid AS id, z AS a, a AS b, b AS c;

# Czyste dane o wynikach wyborów, według obwodu.
TRANSFORM raw15 TO v15 WITH teryt AS teryt, valid_cards AS votes;
RUN v15 > FILE "../sejm_election_results/by_district.cfg" INTO v15;
TRANSFORM raw19 TO v19 WITH teryt AS teryt, valid_cards AS votes;
RUN v19 > FILE "../sejm_election_results/by_district.cfg" INTO v19;
TRANSFORM raw23 TO v23 WITH teryt AS teryt, valid_cards AS votes;
RUN v23 > FILE "../sejm_election_results/by_district.cfg" INTO v23;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, zero;
TRANSFORM ghi TO resghi WITH year AS rok, ind AS zero;
TRANSFORM lhi TO reslhi WITH year AS rok, ind AS zero;
DROP ghi; DROP lhi;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, jeden;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS jeden;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS jeden;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, dwa;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS dwa;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS dwa;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, trzy;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS trzy;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS trzy;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, cztery;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS cztery;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS cztery;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, piec;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS piec;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS piec;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, szesc;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS szesc;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS szesc;

RUN FILE "calcindex.cfg" FROM v15, v19, v23, siedem;
JOIN ghi INTO resghi ON year EQ rok AS resghi; DROP ghi;
TRANSFORM resghi WITH curr() FOR 3:, ind AS siedem;
JOIN lhi INTO reslhi ON year EQ rok AS reslhi; DROP lhi;
TRANSFORM reslhi WITH curr() FOR 3:, ind AS siedem;

TRANSFORM reslhi TO lhi WITH curr() FOR 1:;
TRANSFORM resghi TO ghi WITH curr() FOR 1:;
DUMP lhi;
DUMP ghi;
OUTPUT TABLES lhi, ghi;
